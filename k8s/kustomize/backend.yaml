apiVersion: apps/v1
kind: Deployment
metadata:
  name: copr-backend
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      component: copr-backend
  template:
    metadata:
      labels:
        component: copr-backend
    spec:
      nodeSelector:
        usage: test
        os.architecture: amd64
      initContainers:
        - name: init-backend-resalloc
          image: ebiqe/alpine-nc:latest
          command: [ "sh", "-c", "until nc -z copr-resalloc.fedora-copr.svc.cluster.local 49100; do echo waiting for resalloc service ; sleep 2; done;" ]
        - name: init-backend-redis
          image: ebiqe/alpine-nc:latest
          command: [ "sh", "-c", "until nc -z redis.fedora-copr.svc.cluster.local 6379; do echo waiting for redis service ; sleep 2; done;" ]
      containers:
        - image: pkking/copr_backend_httpd@sha256:aab152da7eb07f3a8ce59fae34fb92b24bbef5de16f7dbf581cf138185ed7a36
          imagePullPolicy: IfNotPresent
          name: httpd
          livenessProbe:
            tcpSocket:
              port: 5002
            initialDelaySeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: 5002
            initialDelaySeconds: 5
            timeoutSeconds: 5
          resources:
            requests:
              cpu: 200m
              memory: 200Mi
          ports:
            - containerPort: 5002
              protocol: TCP
          volumeMounts:
            - mountPath: /var/lib/copr/public_html/results
              name: copr-backend-data
        - image: pkking/copr_backend@sha256:42e11f03e8e8e87c0b45103685e23672d3747b6d0e06c2804b5725f803eb1564
          imagePullPolicy: IfNotPresent
          name: log
          args: ["/usr/bin/copr_run_logger.py"]
          resources:
            requests:
              cpu: 200m
              memory: 200Mi
          volumeMounts:
            - mountPath: /etc/nginx/conf.d/copr-be.conf
              name: copr-secrets
              subPath: backend_copr-be.conf
            - mountPath: /var/lib/copr/public_html/results
              name: copr-backend-data
            - mountPath: /etc/copr/copr-be.conf
              name: copr-secrets
              subPath: backend_copr-be.conf
        - image: pkking/copr_backend@sha256:42e11f03e8e8e87c0b45103685e23672d3747b6d0e06c2804b5725f803eb1564
          imagePullPolicy: IfNotPresent
          name: action
          args: ["/run-backend", "--sign-host", "copr-keygen", "/usr/bin/copr-run-dispatcher", "actions"]
          resources:
            requests:
              cpu: 200m
              memory: 200Mi
          volumeMounts:
            - mountPath: /etc/copr/copr-be.conf
              name: copr-secrets
              subPath: backend_copr-be.conf
            - mountPath: /var/lib/copr/public_html/results
              name: copr-backend-data
        - image: pkking/copr_backend@sha256:42e11f03e8e8e87c0b45103685e23672d3747b6d0e06c2804b5725f803eb1564
          imagePullPolicy: IfNotPresent
          name: build
          args: ["/run-backend", "--sign-host", "copr-keygen", "/usr/bin/copr-run-dispatcher", "builds"]
          resources:
            requests:
              cpu: 200m
              memory: 200Mi
          volumeMounts:
            - mountPath: /home/copr/.ssh/builder_config
              name: copr-backend
              subPath: builder_config
            - mountPath: /home/copr/.ssh/id_rsa
              name: copr-secrets
              subPath: backend_id_rsa
            - mountPath: /home/copr/.ssh/id_rsa.pub
              name: copr-secrets
              subPath: backend_id_rsa.pub
            - mountPath: /var/lib/copr/public_html/results
              name: copr-backend-data
            - mountPath: /etc/copr/copr-be.conf
              name: copr-secrets
              subPath: backend_copr-be.conf
      volumes:
        - name: copr-backend
          configMap:
            name: copr-backend
        - name: copr-backend-data
          persistentVolumeClaim:
            claimName: copr-backend-data
        - name: copr-secrets
          secret:
            secretName: copr-secrets
---
apiVersion: v1
kind: Service
metadata:
  name: copr-backend
spec:
  ports:
    - name: httpd
      port: 5002
      protocol: TCP
      targetPort: 5002
  selector:
    component: copr-backend
  type: ClusterIP
---
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: copr-backend-data
  labels:
    failure-domain.beta.kubernetes.io/zone: cn-north-4a
  annotations:
    everest.io/disk-volume-type: SSD
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Gi
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: backend-cronjob-week
spec:
  schedule: "0 0 * * 0"
  jobTemplate:
    spec:
      template:
        spec:
          affinity:
            podAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - key: component
                    operator: In
                    values:
                    - copr-backend
                topologyKey: kubernetes.io/hostname
          containers:
          - image: pkking/copr_backend@sha256:42e11f03e8e8e87c0b45103685e23672d3747b6d0e06c2804b5725f803eb1564
            name: backend-cronjob
            args: ["sudo", "/etc/cron.weekly/copr-backend"]
            volumeMounts:
              - mountPath: /home/copr/.ssh/builder_config
                name: copr-backend
                subPath: builder_config
              - mountPath: /home/copr/.ssh/id_rsa
                name: copr-secrets
                subPath: backend_id_rsa
              - mountPath: /home/copr/.ssh/id_rsa.pub
                name: copr-secrets
                subPath: backend_id_rsa.pub
              - mountPath: /var/lib/copr/public_html/results
                name: copr-backend-data
              - mountPath: /etc/copr/copr-be.conf
                name: copr-secrets
                subPath: backend_copr-be.conf
          volumes:
            - name: copr-backend
              configMap:
                name: copr-backend
            - name: copr-backend-data
              persistentVolumeClaim:
                claimName: copr-backend-data
            - name: copr-secrets
              secret:
                secretName: copr-secrets
          restartPolicy: OnFailure
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: backend-cronjob-daily
spec:
  schedule: "0 0 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          affinity:
            podAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - key: component
                    operator: In
                    values:
                    - copr-backend
                topologyKey: kubernetes.io/hostname
          containers:
          - image: pkking/copr_backend@sha256:42e11f03e8e8e87c0b45103685e23672d3747b6d0e06c2804b5725f803eb1564
            name: backend-cronjob
            args: ["sudo", "/etc/cron.daily/copr-backend"]
            volumeMounts:
              - mountPath: /home/copr/.ssh/builder_config
                name: copr-backend
                subPath: builder_config
              - mountPath: /home/copr/.ssh/id_rsa
                name: copr-secrets
                subPath: backend_id_rsa
              - mountPath: /home/copr/.ssh/id_rsa.pub
                name: copr-secrets
                subPath: backend_id_rsa.pub
              - mountPath: /var/lib/copr/public_html/results
                name: copr-backend-data
              - mountPath: /etc/copr/copr-be.conf
                name: copr-secrets
                subPath: backend_copr-be.conf
          volumes:
            - name: copr-backend
              configMap:
                name: copr-backend
            - name: copr-backend-data
              persistentVolumeClaim:
                claimName: copr-backend-data
            - name: copr-secrets
              secret:
                secretName: copr-secrets
          restartPolicy: OnFailure
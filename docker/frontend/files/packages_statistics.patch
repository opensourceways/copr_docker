diff --git a/frontend/coprs_frontend/coprs/logic/packages_logic.py b/frontend/coprs_frontend/coprs/logic/packages_logic.py
index 84f23d6e..5febc5cf 100644
--- a/frontend/coprs_frontend/coprs/logic/packages_logic.py
+++ b/frontend/coprs_frontend/coprs/logic/packages_logic.py
@@ -28,6 +28,13 @@ class PackagesLogic(object):
         """
         return models.Package.query.count()
 
+    @classmethod
+    def get_all_packages(cls, order=models.Package.name):
+        """
+        Get all packages in copr ordered by name
+        """
+        return (models.Package.query.order_by(order))
+
     @classmethod
     def get_by_id(cls, package_id):
         return models.Package.query.filter(models.Package.id == package_id)
@@ -84,6 +91,61 @@ class PackagesLogic(object):
             .yield_per(1000)
         )
 
+    @classmethod
+    def get_packages_with_latest_builds(
+            cls, small_build=True, packages=None):
+        """
+        Obtain the list of package objects with the
+        latest build assigned.
+        Parameters:
+
+        :param small_build: Don't assign full Build objects, but only a limited
+            objects with necessary info.
+        :param packages: Don't query the list of Package objects from DB, but
+            use the given 'packages' array.
+        :return: array of Package objects, with assigned latest Build object
+        """
+        if packages is None:
+            return
+
+        pkg_ids = [package.id for package in packages]
+        builds_ids = (
+            models.Build.query.join(models.CoprDir)
+            .filter(models.Build.package_id.in_(pkg_ids))
+            .with_entities(func.max(models.Build.id))
+            .group_by(models.Build.package_id)
+        )
+
+        # map package.id => package object in packages array
+        packages_map = {package.id: package for package in packages}
+
+        builds = (models.Build.query.filter(models.Build.id.in_(builds_ids))
+                  .options(selectinload('build_chroots'))
+                  .yield_per(1000))
+
+        for build in builds:
+            class SmallBuild():
+                pass
+
+            if not build.package_id:
+                continue
+
+            if small_build:
+                small_build_object = SmallBuild()
+                for param in ['state', 'status', 'pkg_version',
+                              'submitted_on']:
+                    # we don't want to keep all the attributes here in memory, and
+                    # also we don't need any further info about assigned
+                    # build_chroot(s).  So we only pick the info we need, and throw
+                    # the expensive objects away.
+                    setattr(small_build_object, param, getattr(build, param))
+                packages_map[build.package_id].latest_build = small_build_object
+            else:
+                packages_map[build.package_id].latest_build = build
+
+
+        return packages
+
     @classmethod
     def get_packages_with_latest_builds_for_dir(
             cls, copr_dir, small_build=True, packages=None):
diff --git a/frontend/coprs_frontend/coprs/views/coprs_ns/coprs_packages.py b/frontend/coprs_frontend/coprs/views/coprs_ns/coprs_packages.py
index 527c73d1..b1f1f5c0 100644
--- a/frontend/coprs_frontend/coprs/views/coprs_ns/coprs_packages.py
+++ b/frontend/coprs_frontend/coprs/views/coprs_ns/coprs_packages.py
@@ -23,6 +23,7 @@ from coprs.views.misc import (
 from coprs.logic.complex_logic import ComplexLogic
 from coprs.logic.packages_logic import PackagesLogic
 from coprs.logic.users_logic import UsersLogic
+from coprs.logic.coprs_logic import CoprsLogic
 from coprs.exceptions import (ActionInProgressException, ObjectNotFound, NoPackageSourceException,
                               InsufficientRightsException, MalformedArgumentException)
 
@@ -322,3 +323,37 @@ def copr_delete_package(copr, package_id):
         flask.flash("Package has been deleted successfully.")
 
     return flask.redirect(helpers.copr_url("coprs_ns.copr_packages", copr))
+
+
+@coprs_ns.route("/packages_statistics")
+@req_with_pagination
+def packages_statistics(page=1):
+    flashes = flask.session.pop('_flashes', [])
+    params = flask.request.args
+    query_packages = PackagesLogic.get_all_packages()
+
+    allowed_keys = ["order"]
+    pagination = None
+    if query_packages.count() > 1000:
+        pagination = query_packages.paginate(page=page, per_page=50)
+        packages = pagination.items
+    else:
+        packages = query_packages.all()
+
+    app.logger.info(f"Packages1: {packages[0].__dict__}")
+    # Assign the latest builds to the package array set.
+    packages = PackagesLogic.get_packages_with_latest_builds(packages=packages)
+
+    for p in packages:
+        p.copr = CoprsLogic.get_by_id(p.copr_id).one()
+
+    app.logger.info(f"Packages2: {packages[0].__dict__} {packages[0].copr.__dict__}")
+    response = flask.Response(
+        stream_with_context(helpers.stream_template(
+            "coprs/show/package_statistics.html",
+            packages=packages,
+            flashes=flashes,
+            serverside_pagination=pagination,
+        )))
+    flask.session.pop('_flashes', [])
+    return response
\ No newline at end of file

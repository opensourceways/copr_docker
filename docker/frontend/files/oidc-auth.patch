--- frontend/coprs_frontend/coprs/auth.py	2023-01-29 11:50:27.937423956 +0800
+++ ../copr_docker/docker/frontend/files/usr/share/copr/coprs_frontend/coprs/auth.py	2022-12-24 18:04:04.965395693 +0800
@@ -11,7 +11,7 @@
 from coprs import app
 from coprs.exceptions import CoprHttpException, AccessRestricted
 from coprs.logic.users_logic import UsersLogic
-
+from flask_pyoidc.user_session import UserSession
 
 class UserAuth:
     """
@@ -31,6 +31,7 @@
 
         FedoraAccounts.logout()
         Kerberos.logout()
+        OpenIDConnect.logout()
 
         flask.flash("You were signed out")
         return flask.redirect(oid.get_next_url())
@@ -40,7 +41,8 @@
         """
         Is a user logged-in? Return their username
         """
-        return FedoraAccounts.username() or Kerberos.username()
+        return FedoraAccounts.username() or Kerberos.username() \
+                or OpenIDConnect.username()
 
     @staticmethod
     def user_object(oid_resp=None, username=None):
@@ -70,7 +72,7 @@
         raise CoprHttpException("No auth method available")
 
     @staticmethod
-    def get_or_create_user(username):
+    def get_or_create_user(username, email=None, timezone=None):
         """
         Get the user from DB, or create a new one without any additional
         metadata if it doesn't exist.
@@ -80,7 +82,7 @@
             return user
         app.logger.info("Login for user '%s', "
                         "creating a database record", username)
-        return UsersLogic.create_user_wrapper(username)
+        return UsersLogic.create_user_wrapper(username, email, timezone)
 
 
 class GroupAuth:
@@ -361,3 +363,54 @@
         filters = filters or {"objectclass": "*"}
         ffilter = ["({0}={1})".format(k, v) for k, v in filters.items()]
         return "(&{0})".format("".join(ffilter))
+
+class OpenIDConnect:
+    """
+    Authentication via Open ID Connect
+    """
+    @staticmethod
+    def enabled(config):
+        return 'OIDC_LOGIN' in config and config['OIDC_LOGIN'] == True
+
+    @staticmethod
+    def is_config_valid(config):
+        return (config.get('OIDC_ISSUER') or ( config.get('OIDC_CLIENT_ISSUER') and app.config.get('OIDC_AUTH_URL') and app.config.get('OIDC_TOKEN_URL') and app.config.get('OIDC_USERINFO_URL' ))) \
+            and app.config.get('OIDC_CLIENT') and app.config.get('OIDC_SECRET') \
+            and app.config.get('OIDC_POST_LOGOUT_REDIRECT_URI')
+
+    @staticmethod
+    def get_userinfo(path):
+        # if user info is construct in "{'msg':200, 'data':{'username':'bbb ...}}"
+        # we should let path = ['data']
+        session = UserSession(flask.session)
+        data = session.userinfo
+        for p in path:
+            data = data.get(p)
+        return data
+
+    @staticmethod
+    def username():
+        """
+        Is a user logged-in? Return their username
+        """
+        if "oidc" in flask.session:
+            return flask.session["oidc"]
+        return None
+
+    @staticmethod
+    def logout():
+        flask.session.pop("oidc", None)
+
+    @staticmethod
+    def user_from_username(userinfo):
+        """
+        Create a `models.User` object from oidc user info
+        """
+        if not userinfo:
+            return None
+
+        zoneinfo = userinfo['zoneinfo'] if 'zoneinfo' in userinfo \
+            and userinfo['zoneinfo'] else None
+
+        user = UserAuth.get_or_create_user(userinfo['username'], userinfo['email'], zoneinfo)
+        return user

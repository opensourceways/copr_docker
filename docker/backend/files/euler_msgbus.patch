diff --git a/backend/copr_backend/euler_msgbus.py b/backend/copr_backend/euler_msgbus.py
new file mode 100644
index 000000000..89efab5bf
--- /dev/null
+++ b/backend/copr_backend/euler_msgbus.py
@@ -0,0 +1,76 @@
+from kafka import KafkaProducer
+import os
+import datetime
+import uuid
+import json
+import ssl
+
+
+def message_from_worker_job(topic, job, who, ip, pid):
+    message = {}
+    content = {
+        'user': job.submitter,
+        'copr': job.project_name,
+        'owner': job.project_owner,
+        'pkg': job.package_name,
+        'build': job.build_id,
+        'chroot': job.chroot,
+        'version': job.package_version,
+        'status': job.status,
+    }
+    content.update({'ip': ip, 'who': who, 'pid': pid})
+    message_types = {
+        'build.start': {
+            'what': "build start: user:{user} copr:{copr}" \
+                    " pkg:{pkg} build:{build} ip:{ip} pid:{pid}",
+        },
+        'chroot.start': {
+            'what': "chroot start: chroot:{chroot} user:{user}" \
+                    " copr:{copr} pkg:{pkg} build:{build} ip:{ip} pid:{pid}",
+        },
+        'build.end': {
+            'what': "build end: user:{user} copr:{copr} build:{build}" \
+                    " pkg:{pkg} version:{version} ip:{ip} pid:{pid} status:{status}",
+        },
+    }
+    content['what'] = message_types[topic]['what'].format(**content)
+    message['body'] = content
+    now = datetime.datetime.now().isoformat()
+    headers = {
+        "openEuler_messaging_schema": "eur." + topic,
+        "sent-at": now,
+    }
+    message['headers'] = headers
+    message['id'] = str(uuid.uuid4())
+    message['topic'] = "org.openEuler.prod.eur." + topic
+    return message
+
+
+class MessageSender:
+    def __init__(self, backend_opts, name, log):
+        self.log = log
+        self.name = name
+        self.pid = os.getpid()
+        self.opts = backend_opts
+
+    def announce(self, topic, job, host):
+        msg = message_from_worker_job(topic, job, self.name, host, self.pid)
+        self.send_message(msg)
+
+
+    def test_kafka_connection(kafka_ip, kafka_port):
+        try:
+            # 创建一个 socket 对象
+            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+
+            # 设置连接超时，单位为秒
+            sock.settimeout(5)
+
+            # 尝试连接 Kafka 服务器
+            sock.connect((kafka_ip, kafka_port))
+
+            print(f"Successfully connected to Kafka at {kafka_ip}:{kafka_port}")
+        except socket.error as e:
+            print(f"Failed to connect to Kafka at {kafka_ip}:{kafka_port}: {e}")
+        finally:
+            sock.close()
+
+    def send_message(self, msg):
+        """ Send message to kafka """
+
+        context = ssl.SSLContext(ssl.PROTOCOL_SSLv23)
+        context.verify_mode = ssl.CERT_REQUIRED
+        context.load_verify_locations("etc/copr/kafka.crt")
+        lIp = self.opts.message.bootstrap_servers.split(",")
+        for ip in lIp:
+            add, port = ip.split(":")
+            self.log.info("the result is %s", test_kafka_connection(add, port))
+        producer = KafkaProducer(bootstrap_servers=self.opts.message.bootstrap_servers,
+                                 sasl_mechanism="SCRAM-SHA-512",
+                                 ssl_context=context,
+                                 security_protocol='SASL_SSL',
+                                 sasl_plain_username=self.opts.message.user_name,
+                                 sasl_plain_password=self.opts.message.password,
+                                 value_serializer=lambda v: json.dumps(v).encode('utf-8'))
+
+        producer.send(self.opts.message.topic, msg)
+        producer.flush()

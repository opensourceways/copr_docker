diff --git a/backend/copr_backend/actions.py b/backend/copr_backend/actions.py
index 4a46bc3f9..60256738e 100644
--- a/backend/copr_backend/actions.py
+++ b/backend/copr_backend/actions.py
@@ -176,7 +176,7 @@ def run(self):
                 # Generate brand new gpg key.
                 self.generate_gpg_key(data["user"], data["copr"])
                 # Put the new public key into forked build directory.
-                get_pubkey(data["user"], data["copr"], self.log, pubkey_path)
+                get_pubkey(data["user"], data["copr"], self.log, self.opts.sign_domain, pubkey_path)
 
             chroot_paths = set()
             for chroot, src_dst_dir in builds_map.items():
diff --git a/backend/copr_backend/background_worker_build.py b/backend/copr_backend/background_worker_build.py
index af53b209f..5fc22eb92 100644
--- a/backend/copr_backend/background_worker_build.py
+++ b/backend/copr_backend/background_worker_build.py
@@ -699,7 +699,7 @@ def _add_pubkey(self):
         # TODO: uncomment this when key revoke/change will be implemented
         # if os.path.exists(pubkey_path):
         #    return
-        get_pubkey(user, project, self.log, pubkey_path)
+        get_pubkey(user, project, self.log, self.opts.sign_domain, pubkey_path)
         self.log.info("Added pubkey for user %s project %s into: %s",
                       user, project, pubkey_path)
 
diff --git a/backend/copr_backend/helpers.py b/backend/copr_backend/helpers.py
index 36705337e..dad101042 100644
--- a/backend/copr_backend/helpers.py
+++ b/backend/copr_backend/helpers.py
@@ -35,6 +35,7 @@
 
 from . import constants
 
+DOMAIN = "fedorahosted.org"
 
 LOG_COMPONENTS = [
     "spawner", "terminator", "vmm", "build_dispatcher", "action_dispatcher",
@@ -301,6 +302,9 @@ def _read_unsafe(self):
         opts.build_groups_count = _get_conf(
             cp, "backend", "build_groups", 1, mode="int")
 
+        opts.sign_domain = _get_conf(
+            cp, "backend", "sign_domain", DOMAIN)
+
         opts.build_groups = []
         for group_id in range(opts.build_groups_count):
             archs = _get_conf(cp, "backend",
diff --git a/backend/copr_backend/sign.py b/backend/copr_backend/sign.py
index 08083af74..6655fb98a 100644
--- a/backend/copr_backend/sign.py
+++ b/backend/copr_backend/sign.py
@@ -17,15 +17,13 @@
 
 
 SIGN_BINARY = "/bin/sign"
-DOMAIN = "fedorahosted.org"
 
-
-def create_gpg_email(username, projectname):
+def create_gpg_email(username, projectname, domain):
     """
     Creates canonical name_email to identify gpg key
     """
 
-    return "{}#{}@copr.{}".format(username, projectname, DOMAIN)
+    return "{}#{}@copr.{}".format(username, projectname, domain)
 
 
 def call_sign_bin(cmd, log):
@@ -54,17 +52,18 @@ def call_sign_bin(cmd, log):
     return handle.returncode, stdout, stderr
 
 
-def get_pubkey(username, projectname, log, outfile=None):
+def get_pubkey(username, projectname, log, sign_domain, outfile=None):
     """
     Retrieves public key for user/project from signer host.
 
+    :param sign_domain: the domain name of the sign key
     :param outfile: [optional] file to write obtained key
     :return: public keys
 
     :raises CoprSignError: failed to retrieve key, see error message
     :raises CoprSignNoKeyError: if there are no such user in keyring
     """
-    usermail = create_gpg_email(username, projectname)
+    usermail = create_gpg_email(username, projectname, sign_domain)
     cmd = [SIGN_BINARY, "-u", usermail, "-p"]
 
     returncode, stdout, stderr = call_sign_bin(cmd, log)
@@ -166,14 +165,14 @@ def sign_rpms_in_dir(username, projectname, path, chroot, opts, log):
     hashtype = gpg_hashtype_for_chroot(chroot, opts)
 
     try:
-        get_pubkey(username, projectname, log)
+        get_pubkey(username, projectname, log, opts.sign_domain)
     except CoprSignNoKeyError:
         create_user_keys(username, projectname, opts)
 
     errors = []  # tuples (rpm_filepath, exception)
     for rpm in rpm_list:
         try:
-            _sign_one(rpm, create_gpg_email(username, projectname),
+            _sign_one(rpm, create_gpg_email(username, projectname, opts.sign_domain),
                       hashtype, log)
             log.info("signed rpm: %s", rpm)
 
@@ -198,7 +197,7 @@ def create_user_keys(username, projectname, opts):
     """
     data = {
         "name_real": "{}_{}".format(username, projectname),
-        "name_email": create_gpg_email(username, projectname)
+        "name_email": create_gpg_email(username, projectname, opts.sign_domain)
     }
 
     log = get_redis_logger(opts, "sign", "actions")
